##
## TODO: The following issues still needs to be fixed
##
## - [ ] Fix the apt repo itself, so it's a valid apt repo, compatible with Debian etc.
##
## - [ ] Build time dependencies, possibly even cached build files, should be cached appropriately,
##       as otherwise builds can take a VERY long time to complete!
##
## - [ ] Update the apt repo instead of replacing it, possibly by simply caching the packages?
##
## - [ ] Rename or refactor the built kernel version, at the very least append a timestamp
##       and/or a short git commit hash, so we can easily distinguish between different versions
##
## - [ ] Decide on the appropriate codename, suite, components etc. and stick with that naming
##
## - [ ] Run a quick automated test after deploying the apt repo to GitHub Pages,
##       just to confirm that a) the website is functional and b) it is a valid apt repo (if possible)
##

name: Build and Deploy

on:
  ## TODO: Setup scheduled builds, but only after we have caching working!
  ## TODO: Setup proper commit, PR, tags etc. building rules, also after caching works!
  push:
    branches: [ 'build', 'kernel-*' ]
  workflow_dispatch:
    inputs:
      force:
        type: boolean
        description: 'Forced build and deploy (also updates cache)'
        required: false
        default: false

env:
  REPO_PATH: ${{ github.workspace }}/repo
  PACKAGES_PATH: ${{ github.workspace }}/packages
  KEYS_PATH: ${{ github.workspace }}/keys
  BUILD_PATH: ${{ github.workspace }}/build
  OUTPUT_PATH: ${{ github.workspace }}/output
  TARGET_BRANCH: kernel-5.16
  PACKAGES_ARTIFACT: 'cb1-kernel-packages'

jobs:

  # Build job
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 300 ## TODO: Increase this if necessary! Benchmark a bit, look into caching etc.
    strategy:
      fail-fast: true
    outputs:
      updated: ${{ steps.copy-packages.outputs.update == 'true' || steps.cache-packages.outputs.cache-hit != 'true' }}
    steps:

      - name: Checkout Repository
        timeout-minutes: 15
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_BRANCH }}

      - name: Prepare Environment
        timeout-minutes: 5
        run: mkdir -p ${{ env.REPO_PATH }} ${{ env.PACKAGES_PATH }} ${{ env.KEYS_PATH }}

      - name: Prepare Kernel
        id: prepare-kernel
        timeout-minutes: 15
        uses: didstopia/cb1-kernel-builder@master
        with:
          repo: github.com/${{ github.repository }}
          branch: ${{ env.TARGET_BRANCH }}
          build-path: ${{ env.BUILD_PATH }}
          only-detect-kernel-version: yes

      - name: Check Kernel Revision
        id: check-kernel-revision
        run: |-
          REVISION="${{ steps.prepare-kernel.outputs.revision }}"
          echo "Detected kernel revision: ${REVISION}"
          echo "NOTICE: Kernel revision checks not yet implemented!"
          echo "is_new_revision=true" > $GITHUB_OUTPUT
          ## TODO: This should check the output of steps.prepare-kernel.outputs.revision,
          ##       then compare that with the latest available tag/release,
          ##       and continue building if the revision is newer, as well as
          ##       create a new tag, a new release and automatic changelog
          ##       from all commits between the last tag and this one!

      ## TODO: This is only a test! This might not work AT ALL because there's a ton of files!
      - name: Cache Build
        id: cache-build
        if: ${{ steps.check-kernel-revision.outputs.is_new_revision == 'true' }}
        uses: actions/cache@v3
        with:
          #path: ${{ env.BUILD_PATH }}
          path: build/
          key: ${{ runner.os }}-build-${{ env.TARGET_BRANCH }}

      - name: Build Kernel
        if: ${{ steps.check-kernel-revision.outputs.is_new_revision == 'true' }}
        timeout-minutes: 120 # NOTE: This typically takes less than an hour, but may take longer!
        uses: didstopia/cb1-kernel-builder@master
        with:
          repo: github.com/${{ github.repository }}
          branch: ${{ env.TARGET_BRANCH }}
          build-path: ${{ env.BUILD_PATH }}
          output-path: ${{ env.OUTPUT_PATH }}
          target-board: h616
          target-branch: current      # FIXME: Should be keep this "current", to match the official builds?
          # target-branch: ${{ env.TARGET_BRANCH }}
          # target-branch: cb1-${{ env.TARGET_BRANCH }}
          target-build-option: kernel # FIXME: We also want to build u-boot AND the image, right?!
          target-release: bullseye    # FIXME: Do we want to set this to something else?

      - name: Build U-Boot
        if: ${{ steps.check-kernel-revision.outputs.is_new_revision == 'true' }}
        timeout-minutes: 120
        uses: didstopia/cb1-kernel-builder@master
        with:
          repo: github.com/${{ github.repository }}
          branch: ${{ env.TARGET_BRANCH }}
          build-path: ${{ env.BUILD_PATH }}
          output-path: ${{ env.OUTPUT_PATH }}
          target-board: h616
          target-branch: current      # FIXME: Should be keep this "current", to match the official builds?
          # target-branch: ${{ env.TARGET_BRANCH }}
          # target-branch: cb1-${{ env.TARGET_BRANCH }}
          target-build-option: u-boot # FIXME: We also want to build u-boot AND the image, right?!
          target-release: bullseye    # FIXME: Do we want to set this to something else?

      - name: Copy Packages
        id: copy-packages
        timeout-minutes: 5
        run: |-
          # Generate hashes for the previous and new packages
          OLD_PACKAGES_HASH=${{ hashFiles('packages/**/*') }}
          NEW_PACKAGES_HASH=${{ hashFiles('output/**/*') }}
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            # Copy any built packages to the packages folder
            #cp -fr ${{ env.OUTPUT_PATH }}/debs/*.deb ${{ env.PACKAGES_PATH }}/
            find ${{ env.OUTPUT_PATH }} -name '*.deb' -exec cp -prv '{}' '${{ env.PACKAGES_PATH }}/' ';'
            echo "update=true" >> "$GITHUB_OUTPUT"
          elif [ "$OLD_PACKAGES_HASH" = "$NEW_PACKAGES_HASH" ]; then
            # No changes to packages, no update necessary
            echo "update=false" >> "$GITHUB_OUTPUT"
          elif [ "${{ steps.check-kernel-revision.outputs.is_new_revision }}" = "true" ]; then
            # Copy any built packages to the packages folder
            #cp -fr ${{ env.OUTPUT_PATH }}/debs/*.deb ${{ env.PACKAGES_PATH }}/
            find ${{ env.OUTPUT_PATH }} -name '*.deb' -exec cp -prv '{}' '${{ env.PACKAGES_PATH }}/' ';'
            echo "update=true" >> "$GITHUB_OUTPUT"
          else
            # Copy any built packages to the packages folder
            #cp -fr ${{ env.OUTPUT_PATH }}/debs/*.deb ${{ env.PACKAGES_PATH }}/
            find ${{ env.OUTPUT_PATH }} -name '*.deb' -exec cp -prv '{}' '${{ env.PACKAGES_PATH }}/' ';'
            echo "update=true" >> "$GITHUB_OUTPUT"
          fi

      - name: List Packages
        #if: ${{ steps.copy-packages.outputs.update == 'true' }}
        run: ls -la ${{ env.PACKAGES_PATH }}/

      - name: Cache Packages
        #if: ${{ steps.copy-packages.outputs.update == 'true' }}
        id: cache-packages
        uses: actions/cache@v3
        with:
          #path: ${{ env.PACKAGES_PATH }}
          path: packages/
          # key: ${{ runner.os }}-packages-${{ env.TARGET_BRANCH }}
          # key: ${{ runner.os }}-packages-${{ hashFiles('packages/**/*') }}
          # key: ${{ runner.os }}-packages-${{ hashFiles('packages/*.deb') }}
          key: ${{ runner.os }}-packages-${{ hashFiles('**.deb') }}

      - name: Upload Build Artifacts
        if: ${{ steps.copy-packages.outputs.update == 'true' }}
        timeout-minutes: 15
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ env.TARGET_BRANCH }}
          #path: ${{ env.OUTPUT_PATH }}
          path: output/
          retention-days: 30
          if-no-files-found: error

      - name: Build Apt Repository
        if: ${{ (steps.copy-packages.outputs.update == 'true' || steps.cache-packages.outputs.cache-hit != 'true') }}
        timeout-minutes: 5
        uses: didstopia/simple-apt-repo@master
        with:
          # timezone: Europe/Helsinki
          timezone: UTC
          repo-origin: Didstopia CB1 Apt Repo
          repo-label: Didstopia BTT CB1 Apt Repository (2023)
          repo-version: 0.1.0
          repo-description: Didstopia custom apt repository for the BIGTREETECH CB1 hardware, including both stock and custom kernel packages.
          key-email: support@didstopia.com
          key-public: ${{ secrets.APT_REPO_PUBLIC_KEY }}
          key-private: ${{ secrets.APT_REPO_PRIVATE_KEY }}

      - name: Generate Repository File Index
        if: ${{ (steps.copy-packages.outputs.update == 'true' || steps.cache-packages.outputs.cache-hit != 'true') }}
        uses: jayanta525/github-pages-directory-listing@v3.0.0
        with:
          FOLDER: repo

      - name: List Repository Contents
        if: ${{ (steps.copy-packages.outputs.update == 'true' || steps.cache-packages.outputs.cache-hit != 'true') }}
        run: ls -la ${{ env.REPO_PATH }}/

      - name: Upload Apt Repository
        if: ${{ (steps.copy-packages.outputs.update == 'true' || steps.cache-packages.outputs.cache-hit != 'true') }}
        timeout-minutes: 15
        uses: actions/upload-pages-artifact@v1
        with:
          path: ${{ env.REPO_PATH }}/
          retention-days: 1

  # Deploy job
  deploy:
    name: Deploy

    # Add a dependency to the build job
    needs: build
    
    # Only run if we got new builds
    if: ${{ needs.build.outputs.updated }}

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
      - name: Display Deployment URL
        run: |
          echo "::notice::${{ steps.deployment.outputs.page_url }}"
          echo "URL=${{ steps.deployment.outputs.page_url }}" >> $GITHUB_OUTPUT
